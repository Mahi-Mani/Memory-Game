{"version":3,"sources":["components/PokemonCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js","images/bg6.jpg"],"names":["PokemonCard","props","Style","img","width","height","border","imgContainer","padding","className","style","alt","name","src","image","onClick","randomizeArr","id","Wrapper","children","Navbar","value","Jumbotron","jumbotron","backgroundImage","Background","score","topscore","shuffle","require","idArr","App","state","pokemon","console","log","includes","push","setState","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"42FAmCeA,MAjCf,SAAqBC,GACnB,IAAMC,EAAQ,CACZC,IAAK,CACHC,MAAO,QACPC,OAAQ,QACRC,OAAQ,mBAGVC,aAAc,CACZC,QAAS,SAIb,OACE,yBAAKC,UAAU,uCAAuCC,MAAOR,EAAMK,cACjE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,aAEf,yBAAKA,UAAU,YAEb,qCAAKE,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,MAAOL,UAAU,6BAA6BC,MAAOR,EAAMC,IAC1FY,QAAS,kBAAMd,EAAMe,aAAaf,EAAMgB,MAD1C,YACyD,eAI3D,yBAAKR,UAAU,gBCpBRS,MAJf,SAAiBjB,GACb,OAAO,yBAAKQ,UAAY,WAAWR,EAAMkB,W,OCe9BC,MAjBf,SAAgBnB,GAEZ,OACI,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YAAW,6BAAS,6BAC/B,yBAAKA,UAAU,uFACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,qCAAqCR,EAAMoB,UAIrE,yBAAKZ,UAAU,aAAiB,6BAAS,6BAAS,6BAAS,+B,gBCaxDa,MAxBf,SAAmBrB,GACf,IAAMC,EAAQ,CACVqB,UAAY,CACRC,gBAAgB,OAAD,OAASC,IAAT,OAGvB,OACI,yBAAKhB,UAAU,OACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACX,yBAAKA,UAAU,2EAA0EC,MAAOR,EAAMqB,WAClG,yBAAKd,UAAU,aACX,wBAAIA,UAAU,oCAAd,WAA0DR,EAAMyB,OAChE,wBAAIjB,UAAU,oCAAd,eAA8DR,EAAM0B,UACpE,uBAAGlB,UAAU,+BAAb,8EACA,uBAAGA,UAAU,+BAAb,mCAIZ,yBAAKA,UAAU,eCdvBmB,EAAUC,EAAQ,IAClBC,EAAQ,GACRJ,EAAQ,EACRC,EAAW,EACXN,EAAQ,sBAuDGU,E,2MAnDbC,MAAQ,CACNC,UACAP,QACAC,WACAN,S,EAGFL,aAAe,SAAAC,GACbiB,QAAQC,IAAIlB,GACPa,EAAMM,SAASnB,IAMlBiB,QAAQC,IAAI,2BACRT,EAAQC,IACVA,EAAWD,GACbI,EAAQ,GACRJ,EAAQ,EACRL,EAAQ,4BAVRS,EAAMO,KAAKpB,GACXS,GAAgB,EAChBL,EAAQ,cAUVa,QAAQC,IAAIL,GACZF,EAAQK,GACR,EAAKK,SAAS,CAAEL,UAASP,QAAOC,WAAUN,W,wEAGlC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEA,MAASkB,KAAKP,MAAMX,QAEtB,kBAAC,EAAD,CACAK,MAASa,KAAKP,MAAMN,MACpBC,SAAYY,KAAKP,MAAML,WAEtBY,KAAKP,MAAMC,QAAQO,KAAI,SAAAP,GAAO,OAC7B,kBAAC,EAAD,CACEjB,aAAc,EAAKA,aACnBC,GAAIgB,EAAQhB,GACZwB,IAAKR,EAAQhB,GACbL,KAAMqB,EAAQrB,KACdE,MAAOmB,EAAQnB,gB,GA7CT4B,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.042e6bd3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction PokemonCard(props) {\r\n  const Style = {\r\n    img: {\r\n      width: \"200px\",\r\n      height: \"200px\",\r\n      border: \"5px solid black\"\r\n\r\n    },\r\n    imgContainer: {\r\n      padding: \"10px\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"imgContainer  d-inline-flex flex-row\" style={Style.imgContainer}>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-2\"></div>\r\n\r\n        <div className=\"col-md-8\">\r\n        \r\n          <img alt={props.name} src={props.image} className=\"img d-inline-flex flex-row\" style={Style.img}\r\n            onClick={() => props.randomizeArr(props.id)} className=\"randomize\"></img>\r\n\r\n        </div>\r\n        \r\n        <div className=\"col-md-2\"></div>\r\n      \r\n    </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default PokemonCard;\r\n\r\n","import React from \"react\";\r\n// import \"./style.css\"\r\n\r\nfunction Wrapper(props) {\r\n    return <div className = \"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n\r\n","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-2\"></div>\r\n            <div className=\"col-md-8\"><br></br><br></br>\r\n                <nav className=\"navbar navbar-dark bg-dark shadow-lg p-3 mb-5 bg-dark rounded fixed-top text-center\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"display-4 text-light text-center \">{props.value}</h1>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n            <div className=\"col-md-2\"></div><br></br><br></br><br></br><br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport Background from '../../images/bg6.jpg';\r\n\r\nfunction Jumbotron(props) {\r\n    const Style = {\r\n        jumbotron : {\r\n            backgroundImage: `url(${Background})`\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-2\"></div>\r\n            <div className=\"col-md-8\">\r\n                <div className=\"jumbotron jumbotron-fluid shadow-lg bg-dark rounded fixed img-responsive\"style={Style.jumbotron}>\r\n                    <div className=\"container\">\r\n                        <h1 className=\"display-4 text-light text-center\">Score : {props.score}</h1>\r\n                        <h1 className=\"display-4 text-light text-center\">Top Score : {props.topscore}</h1>\r\n                        <p className=\"lead text-light text-center\">Try to capture all pokemons. Remember! You can capture a pokemon only once</p>\r\n                        <p className=\"lead text-light text-center\">Click on a Pokemon to Begin!</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-2\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport PokemonCard from \"./components/PokemonCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport pokemon from \"./pokemon.json\";\nimport Navbar from \"./components/Navbar/index\";\nimport Jumbotron from \"./components/Jumbotron/index\";\n// import \"./App.css\";\n\nvar shuffle = require('shuffle-array');\nlet idArr = [];\nlet score = 0;\nlet topscore = 0;\nlet value = \"GOTTA CATCH 'EM ALL\";\n\nclass App extends Component {\n\n  state = {\n    pokemon,\n    score,\n    topscore,\n    value\n  }\n\n  randomizeArr = id => {\n    console.log(id);\n    if (!idArr.includes(id)) {\n      idArr.push(id);\n      score = score + 1;\n      value = \"CAPTURED !\"\n    }\n    else {\n      console.log(\"OOPS! ALREADY CAPTURED!\");\n      if (score > topscore)\n        topscore = score;\n      idArr = [];\n      score = 0;\n      value = \"OOPS! ALREADY CAPTURED!\";\n    }\n    console.log(idArr);\n    shuffle(pokemon);\n    this.setState({ pokemon, score, topscore, value });\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          value = {this.state.value}\n        />\n        <Jumbotron\n        score = {this.state.score}\n        topscore = {this.state.topscore}\n        />\n        {this.state.pokemon.map(pokemon => (\n          <PokemonCard\n            randomizeArr={this.randomizeArr}\n            id={pokemon.id}\n            key={pokemon.id}\n            name={pokemon.name}\n            image={pokemon.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg6.c3eecb02.jpg\";"],"sourceRoot":""}